pico-8 cartridge // http://www.pico-8.com
version 18
__lua__
-- cool game --
-- by fabian (mostly) --

-- constants and variables

-- constants
c_dir_none = 0
c_dir_left = 1
c_dir_right = 2
c_dir_up = 3
c_dir_down = 4

c_state_menu = 0
c_state_game = 1
c_state_generate = 2

c_game_state_free = 0
c_game_state_walking = 1

c_music_game = 00

c_enemy_sprs = {
  001,
  002,
  003,
  004
}

-- indexes represent directions
c_player_sprs = {
  {spr=019, mirror=true},
  {spr=019, mirror=false},
  {spr=021, mirror=false},
  {spr=017, mirror=false}
}

tile_info = {
  wall_tile = 0
}

c_cam_speed = 8

c_sprite_wall = 81
c_sprite_floor = 96

c_sprite_wall_nw = 87
c_sprite_wall_north = 88
c_sprite_wall_ne = 89
c_sprite_wall_west = 103
c_sprite_wall_mid = 104
c_sprite_wall_east = 105
c_sprite_wall_se = 121
c_sprite_wall_south = 120
c_sprite_wall_sw = 119
c_sprite_wall_we = 106
c_sprite_wall_ns = 92
c_sprite_wall_swe = 122
c_sprite_wall_nwe = 90
c_sprite_wall_nse = 93
c_sprite_wall_nsw = 91
c_sprite_wall_nswe = 94

-- variables
state = c_state_menu
game_state = c_game_state_free
player = {
  x = 64,
  y = 64,
  next_x = 64,
  next_y = 64,
  dir = c_dir_left,
}

movement_factor = 0

-->8
-- game logic functions --

function first_generation()
  gen = 0

  last_gen_walls = {}

  for x = 0, 127 do
    add(last_gen_walls, {})
    for y = 0, 63 do
      local has_wall = false
      if rnd(1) > 0.6 then
        mset(x, y, c_sprite_wall)
        has_wall = true
      end
      add(last_gen_walls[x + 1], has_wall)
    end
  end
end

function contains_wall(x, y)
  return mget(x, y) == c_sprite_wall
end

function within_map(x, y)
  return 0 <= x and x <= 127 and 0 <= y and y <= 63
end

function wider_neighbors(x, y)
  local n = 0
  for dx = -2, 2 do
    for dy = -2, 2 do
      if not (dx == 0 and dy == 0) then
        local neighbor_x = x + dx
        local neighbor_y = y + dy
        if within_map(neighbor_x, neighbor_y) and
           last_gen_walls[neighbor_x + 1][neighbor_y + 1] then
          n += 1
        end
      end
    end
  end
  return n
end

function nearest_neighbors(x, y)
  local n = 0
  for dx = -1, 1 do
    for dy = -1, 1 do
      if not (dx == 0 and dy == 0) then
        local neighbor_x = x + dx
        local neighbor_y = y + dy
        if within_map(neighbor_x, neighbor_y) and
           last_gen_walls[neighbor_x + 1][neighbor_y + 1] then
          n += 1
        end
      end
    end
  end
  return n
end

function generation(x, y)
  local nearest = nearest_neighbors(x, y)
  local wider = wider_neighbors(x, y)
  if nearest > 4 or wider < 2 then
    mset(x, y, c_sprite_wall)
  else
    mset(x, y, 0)
  end
end

function map_generation()
  for x = 0, 127 do
    for y = 0, 63 do
      generation(x, y)
    end
  end

  for x = 0, 127 do
    for y = 0, 63 do
      last_gen_walls[x + 1][y + 1] = contains_wall(x, y)
    end
  end
end

c_filler_no_group = -1

function empty_map_groups()
  local map_groups = {}

  for x = 0, 127 do
    add(map_groups, {})
    for y = 0, 63 do
      add(map_groups[x + 1], c_filler_no_group)
    end
  end

  return map_groups
end

function traverse(visited, upcoming, x, y)
  if within_map(x, y) and not contains_wall(x, y) and not visited[x+1][y+1] then
    add(upcoming, {x = x, y = y})
    visited[x+1][y+1] = true
  end
end

function empty_visited()
  local visited = {}

  for x = 0, 127 do
    add(visited, {})
    for y = 0, 63 do
      add(visited[x + 1], false)
    end
  end

  return visited
end

function fill_group(current_group, map_groups, start_x, start_y)
  local visited = empty_visited()
  local upcoming = {{x = start_x, y = start_y}}
  visited[start_x+1][start_y+1] = true

  while(#upcoming > 0) do
    local current = upcoming[1]
    local x = current.x
    local y = current.y
    del(upcoming, current)

    map_groups[x+1][y+1] = current_group

    traverse(visited, upcoming, x + 1, y)
    traverse(visited, upcoming, x - 1, y)
    traverse(visited, upcoming, x, y + 1)
    traverse(visited, upcoming, x, y - 1)
  end
end

function fill_map_holes()
  local map_groups = empty_map_groups()
  local current_group = 1

  for x = 0, 127 do
    for y = 0, 63 do
      if not contains_wall(x, y) and map_groups[x+1][y+1] == c_filler_no_group then
        fill_group(current_group, map_groups, x, y)
        current_group += 1
      end
    end
  end

  local group_counts = {}
  for group = 1, current_group do
    group_counts[group] = 0
  end

  for x = 0, 127 do
    for y = 0, 63 do
      if not contains_wall(x, y) then
        local map_group = map_groups[x+1][y+1]
        group_counts[map_group] += 1
      end
    end
  end

  local largest_group = -1
  local largest_group_size = -1

  for group = 1, current_group do
    if group_counts[group] > largest_group_size then
      largest_group = group
      largest_group_size = group_counts[group]
    end
  end

  for x = 0, 127 do
    for y = 0, 63 do
      if not contains_wall(x, y) and map_groups[x+1][y+1] != largest_group then
        mset(x, y, c_sprite_wall)
      end
    end
  end
end

function add_outer_walls()
  for x = 0, 127 do
    local y = 0
    mset(x, y, c_sprite_wall)
  end
  for x = 0, 127 do
    local y = 63
    mset(x, y, c_sprite_wall)
  end
  for y = 0, 63 do
    local x = 0
    mset(x, y, c_sprite_wall)
  end
  for y = 0, 63 do
    local x = 127
    mset(x, y, c_sprite_wall)
  end
end

function cell_is_cavey(x, y)
  return not within_map(x, y) or cell_is_blocked(x, y)
end

function set_wall_sprite(x, y)
  local north = cell_is_cavey(x, y - 1)
  local south = cell_is_cavey(x, y + 1)
  local west = cell_is_cavey(x - 1, y)
  local east = cell_is_cavey(x + 1, y)

  if north and south and west and east then
    mset(x, y, c_sprite_wall_mid)
  elseif north and south and west then
    mset(x, y, c_sprite_wall_east)
  elseif north and south and east then
    mset(x, y, c_sprite_wall_west)
  elseif north and west and east then
    mset(x, y, c_sprite_wall_south)
  elseif south and west and east then
    mset(x, y, c_sprite_wall_north)
  elseif north and south then
    mset(x, y, c_sprite_wall_we)
  elseif north and west then
    mset(x, y, c_sprite_wall_se)
  elseif north and east then
    mset(x, y, c_sprite_wall_sw)
  elseif south and west then
    mset(x, y, c_sprite_wall_ne)
  elseif south and east then
    mset(x, y, c_sprite_wall_nw)
  elseif west and east then
    mset(x, y, c_sprite_wall_ns)
  elseif north then
    mset(x, y, c_sprite_wall_swe)
  elseif south then
    mset(x, y, c_sprite_wall_nwe)
  elseif west then
    mset(x, y, c_sprite_wall_nse)
  elseif east then
    mset(x, y, c_sprite_wall_nsw)
  else
    mset(x, y, c_sprite_wall_nswe)
  end
end

function set_map_sprites()
  for x = 0, 127 do
    for y = 0, 63 do
      if cell_is_blocked(x, y) then
        set_wall_sprite(x, y)
      else
        mset(x, y, c_sprite_floor)
      end
    end
  end
end

function new_cam()
  return {
    x = 4,
    y = -12,
    moving = false,
    dir = c_dir_none
  }
end

-- todo: change numbers if map gets larger
function random_legal_coords()
  local map_width = 32
  local map_height = 32
  cellx = flr(rnd(map_width))
  celly = flr(rnd(map_height))
  while(cell_is_blocked(cellx, celly)) do
    cellx = flr(rnd(map_width))
    celly = flr(rnd(map_height))
  end

  return {
    x = cellx * 8,
    y = celly * 8
  }
end

function new_enemy()
  coords = random_legal_coords()
  return {
    x = coords.x,
    y = coords.y,
    next_x = coords.x,
    next_y = coords.y,
    type = 0, -- TODO
    spr = 0 -- TODO
  }
end

function _init()
  state = c_state_menu
  current_game = c_game_0
  cam = new_cam()

  enemies = {}
  --for i = 1, 5 do
  --  add(enemies, new_enemy())
  --end
end

function _update60()
  if state==c_state_game then
    update_game()
  elseif state==c_state_menu then
    update_menu()
  elseif state==c_state_generate then
    update_generate()
  end
end

function update_generate()
  gen += 1
  map_generation()
  if gen == 5 then
    fill_map_holes()
    add_outer_walls()
    set_map_sprites()
    init_game()
  end
end

function update_game()
  if (btnp(0) or btnp(1) or btnp(2) or btnp(3) or btnp(4) or btnp(5))
      and game_state == c_game_state_free then
    update_player()
  elseif game_state == c_game_state_walking then
    move_player()
  end
  update_cam()
end

function update_player()
  if btn(0) and not pixel_is_blocked(player.x - 8, player.y) then
    game_state = c_game_state_walking
    player.next_x -= 8
    player.dir = c_dir_left
  elseif btn(1) and not pixel_is_blocked(player.x + 8, player.y) then
    game_state = c_game_state_walking
    player.next_x += 8
    player.dir = c_dir_right
  elseif btn(2) and not pixel_is_blocked(player.x, player.y - 8) then
    game_state = c_game_state_walking
    player.next_y -= 8
    player.dir = c_dir_up
  elseif btn(3) and not pixel_is_blocked(player.x, player.y + 8) then
    game_state = c_game_state_walking
    player.next_y += 8
    player.dir = c_dir_down
  end
end

function move_player()
  move_dude(player)
  if player.next_x == player.x and player.next_y == player.y then
    game_state = c_game_state_free
  end
end

function move_dude(dude)
  move_x = dude.next_x - dude.x
  move_y = dude.next_y - dude.y
  if move_x > 0 then
    dude.x += 2
  elseif move_x < 0 then
    dude.x -= 2
  end
  if move_y > 0 then
    dude.y += 2
  elseif move_y < 0 then
    dude.y -= 2
  end
end

function update_menu()
 if btn(4) then
   first_generation()
   state = c_state_generate
 end
end

function init_game()
  --music(c_music_game)
  state = c_state_game
end

-- checks if the x, y pixel position is blocked by a wall
function pixel_is_blocked(x, y)
  local cellx = flr(x / 8)
  local celly = flr(y / 8)
  return cell_is_blocked(cellx, celly)
end

function cell_is_blocked(cellx, celly)
  local sprite = mget(cellx, celly)
  return fget(sprite, tile_info.wall_tile)
end

function update_cam()
  cam_transition_start()

  if cam.moving then
    move_cam()
  end

  cam_transition_stop()
end

function cam_transition_start()
  if not cam.moving then
    if player.x < cam.x then
      cam.moving = true
      cam.dir = c_dir_left
    elseif player.x >= cam.x + 124 then
      cam.moving = true
      cam.dir = c_dir_right
    elseif player.y < cam.y + 8 then
      cam.moving = true
      cam.dir = c_dir_up
    elseif player.y >= cam.y + 124 then
      cam.moving = true
      cam.dir = c_dir_down
    end
  end
end

function move_cam()
  if cam.dir == c_dir_left then
    cam.x -= c_cam_speed
  elseif cam.dir == c_dir_right then
    cam.x += c_cam_speed
  elseif cam.dir == c_dir_up then
    cam.y -= c_cam_speed
  elseif cam.dir == c_dir_down then
    cam.y += c_cam_speed
  end
end

function cam_transition_stop()
  if cam_at_grid_point() then
    cam.moving = false
  end
end

function cam_at_grid_point()
  return (cam.x - 4) % 120 == 0 and (cam.y + 12) % 112 == 0
end
-->8
-- draw functions --

function _draw()
  cls()
  if state==c_state_menu then
    print("welcome to game", 10, 10)
  elseif state==c_state_game then
    draw_game()
  elseif state==c_state_generate then
    map(0, 0, 0, 0, 128, 128)
  end
end

function draw_game()
  camera(cam.x, cam.y)
  map(0, 0, 0, 0, 128, 128)

  draw_player()
  draw_hud()
  foreach(enemies, draw_enemy)
end

function draw_player()
  local spr_data = c_player_sprs[player.dir]
  spr(spr_data.spr, player.x, player.y, 1, 1, spr_data.mirror)
end

function draw_hud()
  rectfill(cam.x, cam.y, cam.x + 128, cam.y + 9, 0)
end

__gfx__
00000000099990000999999008880000066666600aaaaaa000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000999990999999908855550066666666a000000a00000000000000000000000000000000000000000000000000000000000000000000000000000000
0070070099999990999555558555555066666ff6a000000a00000000000000000000000000000000000000000000000000000000000000000000000000000000
000770000995555599f55f55855666506666f1f6a000000a00000000000000000000000000000000000000000000000000000000000000000000000000000000
0007700000955f5509fffff00555655066fffff0a000000a00000000000000000000000000000000000000000000000000000000000000000000000000000000
00700700002222200cccccc00555555063333330a000000a00000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000002222200cccccc00555555003333330a000000a00000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000020002000c00c0005000050030000300aaaaaa000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000022220000000000002222000000000000222200000000000000cc000090909000000000000000000000000000000000000000000000000000000000
000000000eeeeee0002222000eeeeee0002222000eeeeee000222200000c5c000099999000000000000000000000000000000000000000000000000000000000
00000000e22cfc200eeeeee002e22cf00eeeeee002222e200eeeeee0000ccc9907fffff000000000000000000000000000000000000000000000000000000000
00000000e222f220e22cfc200e2222f002e22cf0022222e002222e20c0cccc00007ffff000000000000000000000000000000000000000000000000000000000
0000000002222220e222f220022222200e2222f002222220022222e0ccccccc000c7777000000000000000000000000000000000000000000000000000000000
0000000002f2222f02f2222f0222f2200222f2200222222002222220ccccccc000ccccc000000000000000000000000000000000000000000000000000000000
000000000222222002222220022222200222222002222220022222200cccccc000ccccc000000000000000000000000000000000000000000000000000000000
00000000020000200200002002000020020000200200002002000020000909000040004000000000000000000000000000000000000000000000000000000000
00000000099909990dddd00000007700999009990dddd00000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000090909090ddd6dd000777770911991190ddd6dd000077877000000000000000000000000000000000000000000000000000000000000000000000000
0000000009090909dd666ddd0777777791899819dd866d8d00777770000000000000000000000000000000000000000000000000000000000000000000000000
0000000000996990d6dddd5d7777777709999990d618d81d07877700000000000000000000000000000000000000000000000000000000000000000000000000
00000000000516006d6dddd567777776005566006d6dddd577776000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000056600d6ddd5d50677776005500660d887888577666667000000000000000000000000000000000000000000000000000000000000000000000000
00000000000566000d6ddd5000677600550000660d78875007776670000000000000000000000000000000000000000000000000000000000000000000000000
000000000000600000dd5500000660005000000600dd550000077700000000000000000000000000000000000000000000000000000000000000000000000000
00000000999000000000000006666000067777606666666000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000900900000000000067777666067777767777777600000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000999955000000000077777777067777767777777600000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000515550000000077777777677777767777777600000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000666660000000077777777677777767777777600000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000999966000000000077777777677777607777777600000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000900900000000000066677776677777607777777600000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000999000000000000000066660067777606666666000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000055d57d555555555555555555000000000000000000000000911111111111111111111119911111199111111111111111111111199111111900000000
000000005555555555d67d5555d67d55000000000000000000000000155555555555555555555551155555511555555555555555555555511555555100000000
0000000056d67d65d5ddddd55ddddd5d000000000000000000000000155555555555555555555551155555511555555555555555555555511555555100000000
0000000056d67d6555d67d5555d67d55000000000000000000000000155555555555555555555551155555511555555555555555555555511555555100000000
0000000056d67d6575d67d5555d67d57000000000000000000000000155555555555555555555551155555511555555555555555555555511555555100000000
0000000056d67d65d5ddddd55ddddd5d000000000000000000000000155555555555555555555551155555511555555555555555555555511555555100000000
000000005555555555d67d5555d67d55000000000000000000000000155555555555555555555551155555511555555555555555555555511555555100000000
0000000055d67d5555d67d5555d67d55000000000000000000000000155555555555555555555551155555519111111111111111111111199111111900000000
9aa33aa95555555555d67d5555d67d55555555550000000000000000155555555555555555555551155555510000000000000000000000000000000000000000
9aaaaaa95566665555d67d5555d67d55556666550000000000000000155555555555555555555551155555510000000000000000000000000000000000000000
a9aaaa9ad5dddd5dd5ddddd55ddddd5d95dddd590000000000000000155555555555555555555551155555510000000000000000000000000000000000000000
aa9999aa5566665555d67d5555d67d55a566665a0000000000000000155555555555555555555551155555510000000000000000000000000000000000000000
aa9999aa7566665775d67d5555d67d57a566665a0000000000000000155555555555555555555551155555510000000000000000000000000000000000000000
a9aaaa9ad5dddd5dd5ddddd55ddddd5d95dddd590000000000000000155555555555555555555551155555510000000000000000000000000000000000000000
9aaaaaa95566665555d67d5555d67d55556666550000000000000000155555555555555555555551155555510000000000000000000000000000000000000000
9aa33aa9555555555555555555555555555555550000000000000000155555555555555555555551155555510000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000155555555555555555555551155555510000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000155555555555555555555551155555510000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000155555555555555555555551155555510000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000155555555555555555555551155555510000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000155555555555555555555551155555510000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000155555555555555555555551155555510000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000155555555555555555555551155555510000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000911111111111111111111119911111190000000000000000000000000000000000000000
__gff__
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000101010000000101010101010101000001010101000001010101000000000000000000000000010101010000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
__sfx__
000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
011400000707000000000000000007070000000000000000070700707400000000000000000000000000000007070000000000000000070700000000000000000707007074000000000002070020740000000000
01140000131400000015140000001614000000161401613016120161150000000000000000000000000000001314000000151400000016140000001a1401a1301a1201a115181401813018120181150000000000
011400001a140000001c140000001d140000001d1401d1301d1201d1150000000000000000000000000000001a140000001c140000001d14000000211402113021120211101f1401f1301f1201f1100000000000
011400002414024144221402214421140211441f1401f1301f1201f1150000000000000000000000000000001a1401a1441c1401c1441d1401d144211402113021120211151f1401f1301f1201f1150000000000
011400002414024144221402214421140211441f1401f1301f1201f115000000000000000000000000000000221402214421140211441f1401d144211402113021120211151f1401f1301f1201f1150000000000
01140000050700000000000000000507000000000000000007070070740000000000000000000000000000000c070000000000000000090700000000000000000507005074000000000000000000000000000000
011400000507000000000000000005070000000000000000070700707400000000000000000000000000000002070000000000002070000000000005070050500504005030050200501500000000000000000000
011400000507000000000000000005070000000000000000070700707400000000000000000000000000000002070000000000002070000000000000070000500004000030000200001500000000000000000000
011400002112221132211422113221122211152112221135221222213222142221422214222132221222211528122281322612226132241222413221122211322113221132211322113221132211322112021115
011400002414024144221402214421140211441f1401f1301f1201f115000000000000000000000000000000221402214421140211441f1401d144211402113021120211151f1401f1301f1201f1152112221135
__music__
00 01024344
00 01024344
00 01034344
00 01034344
00 01044344
00 01054344
00 01044344
00 010a4344
00 06094344
00 07424344
00 06094344
02 08424344

